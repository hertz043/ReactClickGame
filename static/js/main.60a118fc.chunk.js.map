{"version":3,"sources":["CharacterCard/CharacterCard.js","Nav/Nav.js","Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","name","alt","src","image","Nav","href","this","status","score","topScore","Component","Wrapper","state","characters","clicked","event","preventDefault","console","log","target","array","_this","includes","setState","push","newScore","i","length","j","Math","floor","random","_ref","_this2","src_Nav_Nav","key","map","character","src_CharacterCard_CharacterCard","App","src_Wrapper_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60a118fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CharacterCard.css\";\n\nconst CharacterCard = props => (\n\n\n  <div className=\"card\" value={props.id} onClick={props.handleClick} name={props.name} id={props.id}>\n    <div className=\"img-container\">\n      <img alt={props.name} name={props.id} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default CharacterCard;\n","import React, { Component } from \"react\";\nimport \"./Nav.css\";\n\nclass Nav extends Component {\n  render () { \n      return (\n          <nav className=\"navbar\">\n              <h3 className=\"navbar\" href=\"/\">Futurama Clicker Game</h3>\n              <p className=\"nav-item\">{this.props.status}</p>\n              <span className=\"navbar-text\">Score: {this.props.score} | Highest score: {this.props.topScore}</span>\n          </nav>\n      )\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport \"./Wrapper.css\";\nimport characters from \"../character.json\";\nimport CharacterCard from \"../CharacterCard/CharacterCard\";\nimport Nav from \"../Nav/Nav\";\n\n\nclass Wrapper extends Component {\n\n    state = {\n      score: 0,\n      topScore: 0,\n      characters: characters,\n      clicked: [],\n      status: \"Click on the characters below to build up your score, but don't click the same character twice!\"\n    };\n\n    handleClick = (event) => {\n        \n        event.preventDefault();\n        console.log(event.target)\n\n        let name = event.target.name;\n        let array = this.state.clicked;\n\n        if (!this.state.clicked.includes(name)) {\n\n            array.push(name);\n            console.log(array)\n\n            let newScore = this.state.score;\n            newScore+=1;\n\n            this.setState({status: \"Good click, keep going!\"})\n            this.setState({clicked: array})\n            this.setState({score: newScore})\n\n            if (newScore === 12) {\n                this.setState({status: `\"The key to victory is the element of surprise. Surprise!\" - Zapp Brannigan (You Win!)`})\n                this.setState({score: 0})\n                this.setState({clicked: []})\n            }\n            \n            if (newScore > this.state.topScore) {\n                this.setState({topScore: newScore})\n            }\n\n        } else {\n\n           this.setState({clicked: []})\n           this.setState({status: `\"What an idiot I was! And by 'I', I meant 'you'!\" - Prof. Farnsworth (You Lose)`})\n           this.setState({score: 0})\n        }\n\n        let a = this.state.characters;\n\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n\n        this.setState({characters: a});\n    }\n  \n    render() {\n      return (\n        <div>\n         { <Nav \n\n            key = {1}\n            score = {this.state.score}\n            topScore = {this.state.topScore}\n            status = {this.state.status}\n\n         />}\n          <div className=\"container\" id=\"card-container\">\n            <div className=\"row\">\n                {\n                    this.state.characters.map(\n                        character => <CharacterCard \n                            key          ={character.id}\n                            id           ={character.id}\n                            name         ={character.name}\n                            image        ={character.image}\n                            handleClick  ={this.handleClick}\n                        />\n                    ) \n                }\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport Wrapper from \"./Wrapper/Wrapper\";\nimport './App.css';\n\nclass App extends Component {\n    render() {\n      return (\n          <Wrapper />\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}